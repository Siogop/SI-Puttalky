package pl.poznan.put.cs.si.puttalky
 
import pl.poznan.put.cs.si.puttalky.Fakt;
import pl.poznan.put.cs.si.puttalky.Zamowienie; 
import pl.poznan.put.cs.si.puttalky.Ciasto;
import pl.poznan.put.cs.si.puttalky.Dodatek;
import pl.poznan.put.cs.si.puttalky.BazaWiedzy;
import java.util.Set;
import java.util.ArrayList;

/** Author: agalawrynowicz<br>
 * Date: 19-Dec-2016 */

rule "start"
	salience 3
	
	when
		not Fakt(nazwa=="start")
		zamowienie : Zamowienie()
	then
		zamowienie.powitanie();
		System.out.println();
		System.out.println();
		insert(new Fakt("start", "0"));
end

rule "Podaj dodatki"
	salience 2
	
	when
		not Fakt(nazwa == "dodatek")
		not Fakt(nazwa == "nazwanaPizza")
		not Fakt(nazwa == "mięsna")
		not Fakt(nazwa == "wege")
		dodatek : Dodatek()
		parser : Parser()
		baza : BazaWiedzy()
	then
		dodatek.setMonit("Jaki dodatek powinna zawierać Twoja pizza?:\n");
		dodatek.zadajPytanie();
		parser.przetworzOdpowiedz();

		boolean check = false;
		boolean bez = false;

        for (String slowo : parser.getSlowaKluczowe()) {
             if(slowo.equals("bez")) {
                 bez = true;
             }
        }

        for (String slowo : parser.getSlowaKluczowe()) {
            if (slowo.contains("wege")) {
                check = true;
                insert(new Fakt("wege",""));
                break;
            }
            else if (slowo.contains("mięs")) {
                check = true;
                if (bez == true) {
                    insert(new Fakt("wege",""));
                }
                else {
                    insert(new Fakt("mięsna",""));
                }
                break;
            }
        }
        if (check == false) {
		    for (String slowo : parser.getSlowaKluczowe()){
		    	if (slowo.equals("pizza")) continue;
			    for (String uriKlasy : baza.dopasujNazwePizzy(slowo)) {
		            insert(new Fakt("nazwanaPizza", uriKlasy));
		            check = true;
		        }
		    }
		}
		if (check == false) {
			ArrayList<String> dodatki = new ArrayList<String>();
			for (String slowo: parser.getSlowaKluczowe()) {
				if (slowo.equals("pizza")) continue;
				for (String uriKlasy: baza.dopasujDodatek(slowo)) { 
					dodatki.add(uriKlasy);
			    } 
			}
			
			if (dodatki.size() > 0) {
				Fakt f = new Fakt("dodatek", dodatki.get(0));
				for (int i = 1; i < dodatki.size(); i++) {
					f.setWartosc(dodatki.get(i));
				}
				insert(f);	
			}   
		}

		//@TODO	brak dopasowania
		update(dodatek);
end

rule "Podaj rodzaj ciasta"
	salience 2
	
	when
		not Fakt(nazwa == "rodzaj_ciasta")
		ciasto : Ciasto()
		parser : Parser()
	then
		  ciasto.setMonit("Podaj rodzaj ciasta:\n");
		  ciasto.zadajPytanie();
		  parser.przetworzOdpowiedz();
		 
		for (String slowo : parser.getSlowaKluczowe()){
			if (slowo.equals("cienki")){
		       insert(new Fakt("rodzaj_ciasta", "cienkie"));
			} else if (slowo.equals("gruby")) {
		       insert(new Fakt("rodzaj_ciasta", "grube"));
			}
		}
					
		//@TODO	brak dopasowania
		
		update(ciasto);
end

rule "Polecana pizza"
	salience 1
	
	when
		Fakt(nazwa == "dodatek") && 
		Fakt(nazwa == "rodzaj_ciasta") && 	
		not Fakt(nazwa == "pizza_propozycja") &&
        $dodatek : Fakt( nazwa == "dodatek")
 		
		baza: BazaWiedzy()
		pizza: Pizza()
	then
		Set<String> pizze = baza.wyszukajPizzePoDodatkach($dodatek.getWartosc());  
		if (pizze.size()>1){            		

			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
		    	if (!nazwaPizzy.equals("Nothing")){
		       	   System.out.println("Polecam pizzę: "+nazwaPizzy);
		       	}
		    }
		}
		else {
			System.out.println("Przyjąłem specjalne zamówienie na Twoją pizzę z: ");
			for (int i = 0; i < $dodatek.getWartosc().size(); i++)
				System.out.println($dodatek.getWartosc().get(i).substring(53));
			insert(new Fakt("pizza_propozycja", ""));
	    }
       
end

rule "Polecana nazwana pizza"
	salience 1

	when
		Fakt(nazwa == "nazwanaPizza") &&
		Fakt(nazwa == "rodzaj_ciasta") &&
		not Fakt(nazwa == "pizza_propozycja") &&
        $nazwanaPizza : Fakt( nazwa == "nazwanaPizza")
		baza: BazaWiedzy()
	then
		insert(new Fakt("pizza_propozycja",$nazwanaPizza.getWartosc().get(0)));
		System.out.println("Przyjąłem zamówienie na pizzę: "+$nazwanaPizza.getWartosc().get(0).substring(53));
end

rule "Polecana mięsna pizza"
   	salience 1

   	when
   		Fakt(nazwa == "mięsna") &&
   		Fakt(nazwa == "rodzaj_ciasta") &&
   		not Fakt(nazwa == "pizza_propozycja") &&
           $mięsnaPizza : Fakt( nazwa == "mięsna")

   		baza: BazaWiedzy()
   	then
		Set<String> pizze = baza.getMięsnePizze();
		if (pizze.size()>1){
			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
				if (!nazwaPizzy.contains("Nothing"))
					System.out.println("Polecam pizzę: "+nazwaPizzy.substring(54,nazwaPizzy.length()-1));
			}
		}

end

rule "Polecana wege pizza"
   	salience 1

   	when
   		Fakt(nazwa == "wege") &&
   		Fakt(nazwa == "rodzaj_ciasta") &&
   		not Fakt(nazwa == "pizza_propozycja") &&
           $wegePizza : Fakt( nazwa == "wege")

   		baza: BazaWiedzy()
   	then

	Set<String> pizze = baza.getWegePizze();

	if (pizze.size()>1){
		for (String nazwaPizzy : pizze) {
			insert(new Fakt("pizza_propozycja", nazwaPizzy));
			if (!nazwaPizzy.contains("Nothing"))
				System.out.println("Polecam pizzę: "+nazwaPizzy.substring(54,nazwaPizzy.length()-1));
		}
	}

end

rule "zakończenie"

	when
		not (Fakt(nazwa == "koniec")) &&
		Fakt(nazwa == "pizza_propozycja") 

		zamowienie : Zamowienie()
	then
		insert(new Fakt("koniec", "0"));
		zamowienie.pozegnanie();
end